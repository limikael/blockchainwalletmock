#!/usr/bin/env php

<?php

	require_once __DIR__."/../src/BlockchainWalletMock.php";

	if (php_sapi_name()!="cli")
		exit("Should be used through the cli.");

	$availableOptions=array(
		"dsn:", "guid:", "password:", "defaultFee:", "callbackUrl:", 
		"port:", "help", "leaveTmp");

	$options=getopt("",$availableOptions);

	if (!isset($options["port"]) || isset($options["help"])) {
		echo "Usage: blockchainwalletmock [options]\n\n";
		echo "Options:\n\n";
		echo "  --port=<port>        The port where to listen. Required.\n";
		echo "  --guid=<guid>        Expect this guid on client requests.\n";
		echo "  --dsn=<dsn>          Data service name where to store data.\n";
		echo "  --defaultFee=<fee>   Use this default fee when emulating transactions.\n";
		echo "  --callbackUrl=<url>  Callback to notify of incoming transactions.\n";
		echo "  --leaveTmp           Don't remove tmp files.\n";
		echo "\n";

		exit(1);
	}

	$blockchanWalletMock=new BlockchainWalletMock();

	$tmpfiles=[];

	if (!isset($options["dsn"])) {
		$fn=tempnam(sys_get_temp_dir(),"");
		$options["dsn"]="sqlite:".$fn;
		$tmpfiles[]=$fn;
	}

	$blockchanWalletMock->setPort($options["port"]);

	$blockchanWalletMock->setDsn($options["dsn"]);

	if ($options["callbackUrl"])
		$blockchanWalletMock->setCallbackUrl($options["callbackUrl"]);

	if ($options["guid"])
		$blockchanWalletMock->setGuid($options["guid"]);

	if ($options["defaultFee"])
		$blockchanWalletMock->setDefaultFee($options["defaultFee"]);

	declare(ticks = 1);

	function shutdown() {
		global $tmpfiles;
		echo "Closing, removing ".sizeof($tmpfiles)." tmp file(s).\n";

		foreach ($tmpfiles as $fn)
			unlink($fn);

		exit(0);
	}

	if (!isset($options["leaveTmp"]) && function_exists("pcntl_signal")) {
		pcntl_signal(SIGTERM,"shutdown");
		pcntl_signal(SIGINT,"shutdown");
	}

	else {
		echo "Will not clean up tmp files on exit...\n";
	}

	$blockchanWalletMock->runForever();